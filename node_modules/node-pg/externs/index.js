/**
 * Module namespace.
 *
 * @namespace
 */
var pg = {};


/**
 * Table result row definition.
 *
 * @see pg.Table
 * @typedef {Object.<string, (number|string|boolean)>}
 */
pg.Row;


/**
 * Definition of query result table.
 *
 * @typedef {Array.<!pg.Row>}
 */
pg.Table;


/**
 * Definition of function type to handle query execution result.
 *
 * Function argument - query result table.
 *
 * @see pg.Table
 * @typedef {?function(pg.Table)}
 */
pg.ResultHandler;


/**
 * Definition of function type to handle errors.
 *
 * Function arguments are error message string and optional error code.
 *
 * @typedef {?function(string, number=)}
 */
pg.ErrorHandler;


/**
 * Definition of value types for insertion to prepared query.
 *
 * @typedef {?(number|string|boolean)}
 */
pg.PreparedValue;


/**
 * Definition of data object for query preparation.
 *
 * @see pg.PreparedValue
 * @typedef {Object.<string, (!pg.PreparedValue|!Array.<!pg.PreparedValue>)>}
 */
pg.PreparedParams;


/**
 * Функция задающая максимальное количество запросов.
 * из одного стека.
 * @param {number} count
 */
pg.setMaximumStackDeep = function(count) {};


/**
 * Функция задающая хэндлер для обработки достижения максимального
 * количества запросов.
 * @param {function()} handler
 */
pg.setStackHandler = function(handler) {};


/**
 * Escape strings in sql queries.
 *
 * For string escape we use
 * <a href="http://goo.gl/X43TE">dollar-quoting</a>.
 *
 * @param {string} string Original string.
 * @return {string} Escaped string.
 */
pg.escapeString = function(string) {};


/**
 * Escape array of values.
 *
 * Array is casted to string of escaped elements divided by comma.
 *
 * @see pg.escapeString
 * @param {!Array.<!pg.PreparedValue>} array Array of values.
 * @return {string} Escaped strings divided by comma.
 */
pg.escapeArray = function(array) {};


/**
 * @param {string} message
 */
pg.logger = function(message) {};


/**
 * Connections pool initialization.
 *
 * @see pg.ErrorHandler
 * @see console.error
 * @param {number} size Pool size - Count of pool connections.
 * @param {!Object} options Connection options. Options must be an object with
 * keys specified in <a href="http://goo.gl/eqPw4">documentation</a>.
 * @param {!pg.ErrorHandler=} opt_errorHandler Connection error handler.
 *    <pre>console.error</pre> will be used by default.
 * @param {function()=} opt_stackDeepWarnHandler
 * @param {function(string)=} opt_logger
 * @param {number=} opt_criticalExecutionTime
 */
pg.init = function(size, options, opt_errorHandler, opt_stackDeepWarnHandler,
                   opt_logger, opt_criticalExecutionTime) {};


/**
 * SQL-query executing.
 *
 * @see pg.ResultHandler
 * @see pg.ErrorHandler
 * @param {string} query SQL-query string.
 * @param {!pg.ResultHandler} complete Success result handler.
 * @param {!pg.ErrorHandler} cancel Execution error handler.
 */
pg.exec = function(query, complete, cancel) {};


/**
 * Executes prepared SQL-query.
 *
 * Query to prepare is a query like
 * <pre>SELECT $value1 AS value1, $value2 AS value2</pre>, where
 * <pre>$value1</pre> and <pre>$value2</pre> are placeholders for
 * prepared values of <pre>value1</pre> and <pre>value2</pre>.
 *
 * @see pg.prepareQuery
 * @param {string} query Prepared SQL-query string.
 * @param {!pg.PreparedParams} params Data object for query preparation.
 * @param {!pg.ResultHandler} complete Success result handler.
 * @param {!pg.ErrorHandler} cancel Execution error handler.
 */
pg.execPrepared = function(query, params, complete, cancel) {};


/**
 * Prepare ready-to-use SQL-query.
 *
 * @param {string} query Prepared SQL-query string.
 * @param {!pg.PreparedParams} params Data object for query preparation.
 * @return {string} Ready-to-use SQL-query.
 */
pg.prepareQuery = function(query, params) {};


/**
 * Destroy connection pool.
 */
pg.destroy = function() {};




